1
00:00:00,000 --> 00:00:03,030
When not to use a NoSQL database?

2
00:00:03,030 --> 00:00:05,910
So the very first one right up here in the front is,

3
00:00:05,910 --> 00:00:08,580
if you need ACID transactions.

4
00:00:08,580 --> 00:00:12,255
If you need a consistent database with ACID transactions,

5
00:00:12,255 --> 00:00:15,435
then NoSQL will not be able to serve this need.

6
00:00:15,435 --> 00:00:21,165
NoSQL databases are eventually consistent and do not provide ACID transaction.

7
00:00:21,165 --> 00:00:24,060
We'll talk about this much more in Lesson 3.

8
00:00:24,060 --> 00:00:26,490
If you need the ability to do JOINS,

9
00:00:26,490 --> 00:00:29,820
NoSQL does not allow the ability to do JOINS.

10
00:00:29,820 --> 00:00:34,050
This is not allowed as it will result in a full table scan.

11
00:00:34,050 --> 00:00:37,530
Scanning a whole table is highly frowned on as the data might

12
00:00:37,530 --> 00:00:41,220
be spread over hundreds or thousands of servers.

13
00:00:41,220 --> 00:00:44,445
Ability to do aggregations and analytics.

14
00:00:44,445 --> 00:00:46,855
For the same reasons, just mentioned,

15
00:00:46,855 --> 00:00:52,550
aggregations and analytics are not meant for NoSQL databases without optimizations.

16
00:00:52,550 --> 00:00:54,980
A product like datasets enterprise,

17
00:00:54,980 --> 00:00:57,050
add support for this with the combination of

18
00:00:57,050 --> 00:01:00,280
Apache Cassandra and Apache Spark in their product,

19
00:01:00,280 --> 00:01:03,215
but it doesn't come right out of the box.

20
00:01:03,215 --> 00:01:05,900
Having changing business requirements.

21
00:01:05,900 --> 00:01:10,070
Ad hoc queries are possible with a NoSQL database of course,

22
00:01:10,070 --> 00:01:14,500
but difficult as the data model was done to fit to a particular query.

23
00:01:14,500 --> 00:01:16,730
You will need to have your queries in advance with

24
00:01:16,730 --> 00:01:18,920
a NoSQL database to do proper data modeling,

25
00:01:18,920 --> 00:01:20,990
if they are not available or you need to be able to

26
00:01:20,990 --> 00:01:23,195
have flexibility on how you query your data,

27
00:01:23,195 --> 00:01:25,955
you'll need to stick with a relational database.

28
00:01:25,955 --> 00:01:28,120
If you have a small dataset,

29
00:01:28,120 --> 00:01:33,320
NoSQL databases again were made for big datasets not small datasets.

30
00:01:33,320 --> 00:01:34,790
While it doesn't work,

31
00:01:34,790 --> 00:01:36,200
it wasn't created for that.

32
00:01:36,200 --> 00:01:38,605
The overhead would be unnecessary,

33
00:01:38,605 --> 00:01:43,760
but you should always evaluate your own use case when making these decisions.

34
00:01:43,760 --> 00:01:47,240
As you can see, all the reasons to not use

35
00:01:47,240 --> 00:01:51,175
a NoSQL database are the reasons to use a relational database.

36
00:01:51,175 --> 00:01:55,310
Over time, NoSQL databases are improving and adding features,

37
00:01:55,310 --> 00:01:59,090
but there are some features that are just not available by design.

38
00:01:59,090 --> 00:02:01,865
NoSQL databases are eventually consistent.

39
00:02:01,865 --> 00:02:03,865
Again, more on this in Lesson 3,

40
00:02:03,865 --> 00:02:06,560
and they do not have ACID transactions.

41
00:02:06,560 --> 00:02:11,600
The ability to do JOINS is not allowed as a full table scan are highly frowned on,

42
00:02:11,600 --> 00:02:15,590
as you may be joining tables across hundreds or thousands of servers.

43
00:02:15,590 --> 00:02:19,070
Remember, NoSQL databases and relational

44
00:02:19,070 --> 00:02:22,760
databases do not replace each other for all tasks.

45
00:02:22,760 --> 00:02:26,030
Both do different tasks extremely well and should

46
00:02:26,030 --> 00:02:30,120
be utilized for the use cases they fit best.

