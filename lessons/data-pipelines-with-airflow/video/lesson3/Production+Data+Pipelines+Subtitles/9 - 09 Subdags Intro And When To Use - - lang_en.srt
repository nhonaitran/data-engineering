1
00:00:00,080 --> 00:00:06,510
Commonly repeated series of tasks within DAGs can be captured as reusable subDAGs.

2
00:00:06,510 --> 00:00:09,390
A subDAG is similar to a normal DAG,

3
00:00:09,390 --> 00:00:11,880
except that it's created by a factory function that

4
00:00:11,880 --> 00:00:14,850
parameterizes and returns the DAG configuration.

5
00:00:14,850 --> 00:00:18,170
SubDAGs are always used as a piece of another DAG.

6
00:00:18,170 --> 00:00:20,595
They do not stand on their own.

7
00:00:20,595 --> 00:00:25,500
Let's revisit our bike share DAG for an example of where we can make use of a subDAG.

8
00:00:25,500 --> 00:00:28,050
As we continue to add DAGs to Airflow,

9
00:00:28,050 --> 00:00:30,870
we'll find functional overlap between our pipelines.

10
00:00:30,870 --> 00:00:34,500
In this example, let's pretend that we wanted to try and correlate

11
00:00:34,500 --> 00:00:38,715
weather patterns in our service area with any bike repairs that occurred.

12
00:00:38,715 --> 00:00:42,375
To do that, we'll add another DAG to perform that analysis.

13
00:00:42,375 --> 00:00:46,445
On the left here, you see the DAG that we've been working on through much of this class.

14
00:00:46,445 --> 00:00:50,360
We have trips data and stations data going from S3ToRedshift.

15
00:00:50,360 --> 00:00:54,580
We're checking that the data is high-quality, they HasRowsOperator.

16
00:00:54,580 --> 00:00:59,795
Then, finally, we're using the PostgresOperator to execute station traffic analysis.

17
00:00:59,795 --> 00:01:01,775
So, in the example I just mentioned,

18
00:01:01,775 --> 00:01:04,055
we want to correlate repairs and weather data,

19
00:01:04,055 --> 00:01:06,350
so we're going to load that data from S3ToRedshift.

20
00:01:06,350 --> 00:01:10,010
Now, we're going to check to see if there are rows, and finally,

21
00:01:10,010 --> 00:01:15,050
we are going to run our actual weather repair analysis using the PostgresOperator.

22
00:01:15,050 --> 00:01:18,720
We may have a hunch that repairs go up when the weather is bad,

23
00:01:18,720 --> 00:01:21,595
and repairs go down when the weather is good.

24
00:01:21,595 --> 00:01:24,020
To prove that out, we'll build a DAG that

25
00:01:24,020 --> 00:01:26,435
loads repairs and weather data from S3ToRedshift.

26
00:01:26,435 --> 00:01:29,915
Then, we'll verify that data is present in our Redshift tables.

27
00:01:29,915 --> 00:01:33,425
Finally, we'll perform our weather repair analysis.

28
00:01:33,425 --> 00:01:35,780
Here's what our DAGs would look like if we replaced

29
00:01:35,780 --> 00:01:38,420
our repeated S3ToRedshift copy operations with

30
00:01:38,420 --> 00:01:42,935
the subDAG that was parameterizable and performed the same work.

31
00:01:42,935 --> 00:01:46,505
So, see here, we have S3ToRedshift subDAG.

32
00:01:46,505 --> 00:01:51,660
We've parameterized it with stations trips and repairs weather.

33
00:01:51,660 --> 00:01:54,620
As you can see, it's much simpler to reason about

34
00:01:54,620 --> 00:01:58,550
the high level goals of each one of these DAGs than it was in the previous slide.

35
00:01:58,550 --> 00:02:01,400
It's important to notice that the specific details each one of

36
00:02:01,400 --> 00:02:04,055
these DAGs is now harder to into it as well.

37
00:02:04,055 --> 00:02:07,550
Replacing those related operations with a subDAG allows us to

38
00:02:07,550 --> 00:02:11,315
decrease the amount of code we need to write and to maintain to create a new DAG.

39
00:02:11,315 --> 00:02:14,075
There are additional benefits to subDAGs as well.

40
00:02:14,075 --> 00:02:17,090
If we use a subDAG to perform common operation,

41
00:02:17,090 --> 00:02:22,460
that means that bug fixes speedups and other enhancements can be made much more quickly.

42
00:02:22,460 --> 00:02:28,175
That's because the code that you see here is actually shared between these two subDAGs.

43
00:02:28,175 --> 00:02:31,130
It also means that those same changes can be distributed to

44
00:02:31,130 --> 00:02:35,410
all DAGs that use the subDAG as soon as the update occurs.

