1
00:00:00,000 --> 00:00:05,410
So, now that we've talked about data pipelines and data validation,

2
00:00:05,410 --> 00:00:08,845
I want to talk a little bit about directed acyclic graphs.

3
00:00:08,845 --> 00:00:13,620
The reason that we're talking about directed acyclic graphs or DAGs is

4
00:00:13,619 --> 00:00:18,774
because the data pipelines are well-expressed as directed acyclic graphs.

5
00:00:18,774 --> 00:00:21,369
Before we dig into why they're such a good fit,

6
00:00:21,370 --> 00:00:23,845
let's quickly review what a DAG is.

7
00:00:23,844 --> 00:00:26,289
As engineers, we use graphs to describe

8
00:00:26,289 --> 00:00:29,695
concepts and relationships that exist between them.

9
00:00:29,695 --> 00:00:32,649
Graphs are everywhere in software engineering,

10
00:00:32,649 --> 00:00:36,009
and there are powerful concept and modeling complex systems.

11
00:00:36,009 --> 00:00:40,864
Graphs describe entities and the relationships that exist between them.

12
00:00:40,865 --> 00:00:44,450
Famously, Facebook uses the concept of

13
00:00:44,450 --> 00:00:48,185
a graph to model their users as nodes and their relationships,

14
00:00:48,185 --> 00:00:49,700
otherwise known as edges,

15
00:00:49,700 --> 00:00:51,785
to others as friends and family.

16
00:00:51,784 --> 00:00:53,539
So, in this image here,

17
00:00:53,539 --> 00:00:59,119
you can see just a real quick example of people and the relationships between them.

18
00:00:59,119 --> 00:01:04,189
This is just basically a snapshot of visualization of what a graph might look like.

19
00:01:04,189 --> 00:01:08,159
Another example that I like are airlines.

20
00:01:08,159 --> 00:01:10,219
Airlines use graphs to model the routes.

21
00:01:10,219 --> 00:01:12,394
Airports can be modeled as nodes,

22
00:01:12,394 --> 00:01:15,020
which have edges to each other in the form of flight paths.

23
00:01:15,019 --> 00:01:19,069
So, there's a lot going on in this image as you can see there's a lot of lines here.

24
00:01:19,069 --> 00:01:21,319
If we were able to actually see something,

25
00:01:21,319 --> 00:01:24,169
you might see Chicago here and then a bunch of lines going out from

26
00:01:24,170 --> 00:01:28,010
Chicago to other airports like San Francisco,

27
00:01:28,010 --> 00:01:30,995
New York City, et cetera.

28
00:01:30,995 --> 00:01:35,990
DAGs or directed acyclic graphs are a special subset of graphs in which

29
00:01:35,989 --> 00:01:41,284
the edges between nodes have a specific direction and no cycles exist.

30
00:01:41,284 --> 00:01:43,250
When we say no cycles exist,

31
00:01:43,250 --> 00:01:47,045
what we mean is the nodes can't create a path back to themselves.

32
00:01:47,045 --> 00:01:48,700
Looking at the graph,

33
00:01:48,700 --> 00:01:52,480
we can say that A has a relationship to B,

34
00:01:52,480 --> 00:01:56,285
but B does not have relationship back to A.

35
00:01:56,284 --> 00:02:00,935
This what we mean when we say that this is a directed graph and we can say the same thing

36
00:02:00,935 --> 00:02:06,109
between about the edges or the relationships between all the nodes in this graph.

37
00:02:06,109 --> 00:02:10,789
We denote that relationship and the direction of that relationship with this arrow.

38
00:02:10,789 --> 00:02:13,314
So, you can see we have an arrow here saying that A

39
00:02:13,314 --> 00:02:16,889
has a relationship to B. Additionally,

40
00:02:16,889 --> 00:02:19,805
if we look at this graph, we can see that no cycles exist.

41
00:02:19,805 --> 00:02:21,340
Once a node has been visited,

42
00:02:21,340 --> 00:02:24,004
there's a clear progression to next set of nodes.

43
00:02:24,004 --> 00:02:26,870
So, once we've gone from A to B for example,

44
00:02:26,870 --> 00:02:30,219
there is no path that takes me back to A.

45
00:02:30,219 --> 00:02:33,319
So, if there was a path that took me back to A,

46
00:02:33,319 --> 00:02:35,569
I'd have a cycle in my graph.

47
00:02:35,569 --> 00:02:38,840
DAGs are a natural fit for representing data pipelines.

48
00:02:38,840 --> 00:02:42,860
If we consider the steps of a traditional ETL process for example,

49
00:02:42,860 --> 00:02:47,600
we will see that the process typically involves a series of discrete steps.

50
00:02:47,599 --> 00:02:53,314
First, we extract data and that's what we're going to represent with this E. Then,

51
00:02:53,314 --> 00:02:56,800
once extraction's complete, we're going to transform it.

52
00:02:56,800 --> 00:03:00,439
Finally, we load the transformed data somewhere.

53
00:03:00,439 --> 00:03:03,139
Each step depends on the last.

54
00:03:03,139 --> 00:03:04,744
To transform the data,

55
00:03:04,745 --> 00:03:06,185
we must first extract it.

56
00:03:06,185 --> 00:03:10,074
If extraction fails, then there is no data to transform.

57
00:03:10,074 --> 00:03:12,894
Likewise, if we fail to transform the data,

58
00:03:12,895 --> 00:03:15,200
there is no data to actually load.

59
00:03:15,199 --> 00:03:19,429
Given that we consider each step in the ETL process as a node in

60
00:03:19,430 --> 00:03:21,590
our graph and the completion of that step as

61
00:03:21,590 --> 00:03:25,090
the relationship or edge between these nodes.

